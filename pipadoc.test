#!/bin/sh
# Pipadoc test suite
# Copyright (C)
#   2017, 2020,                         Christian Th√§ter <ct@pipapo.org>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

#
# NOTE: this is a very basic, incomplete test suite yet
#

test_lua_interpreters="${1:-luajit ravi lua5.3 lua-5.3 lua5.2 lua-5.2 lua lua-5.1 lua5.1}"
test "$1" && shift

awk '/^#>/{sub("#> ?", ""); print }' pipadoc.test >'test_expected'

error=0

for i in $test_lua_interpreters; do
    echo
    echo "checking $i"
    sh pipadoc.install -i "$i" -x "_test_$i" || continue

    echo "./pipadoc_test_$i -d -v -D TESTSUITE -t TEST -r test '%.test$' '#' pipadoc.test"
    if ./pipadoc_test_$i -d -v "$@" -D TESTSUITE -t TEST -r test '%.test$' '#' pipadoc.test -o test_out_$i; then

            if cmp test_out_$i test_expected; then
                    echo "SUCCESS: pipadoc_test_$i"
                    rm "test_out_$i"
                    rm "pipadoc_test_$i" 2>/dev/null
            else
                echo "FAIL: pipadoc_test_$i"
                diff -u test_expected test_out_$i
                error=$((error + 1))
            fi
    else
        error=$((error + 1))
    fi
done

exit $error

#TODO: recursion tests    #FOO=FOO
#PLANNED: stderr expected tests #DEBUGLEVEL> ...

# tests
#TEST: NOORIGIN
#TEST: Pipadoc Testsuite
#TEST:
#:
#=oneline
#:
#@oneline
#:
##oneline
#:
#$oneline
#:
#=oneline_concat
#:
#=block
#:
#@block
#:
##block
#:
#$block
#:
#=block_concat
#:
#@argonly
#: not a docline NODOC
#:
#=nestedpaste
#:
#@nestedargs
#:
#: TESTFOO
echo TESTPP becomes a docline
#:
#=strsubst
#:
#: Empty and non-existing parameters
#.:
#=
#@
##
#:
#=doesnotexist
#@doesnotexist
##doesnotexist
#:
#=notext
#@nokeys
##nokeys
#:
#: drop the NODOC
#orphan:key is not used
#: END

#nokeys: has no keys
#notext:0 has no normal text

#oneline: oneline test
#oneline:b oneline w/ arg b
#oneline:a oneline w/ arg a
#oneline:2 oneline w/ arg 2
#oneline:1 oneline w/ arg 1
#oneline.3: oneline w/ arg 3 dot syntax
#oneline.4:5 oneline w/ arg 4 dot syntax warning

#oneline_concat: oneline_concat
#oneline_concat+  end

#block:
#: block test
#block:b
#: block w/ arg b
#block:a
#: block w/ arg a
#block:2
#: block w/ arg 2
#block:1
#: block w/ arg 1
#block.3:
#: block w/ arg 3 dot syntax

#block_concat:
#: block_concat
#+  end

#argonly:
#:bb
#: 3. arg block
#.cc:
#: 4. arg block dot syntax
#:aa 1. arg oneline
#.aa: 2. arg oneline dot syntax

#nestedpaste:
#: nested paste
#=nestedpasteinner

#nestedpasteinner:
#:  nestedpaste inner
#=nestedpasteinner2

#nestedpasteinner2:
#:  nestedpaste inner2


#nestedargs:aa
#: nested arguments paste old syntax
#=nestedargsinner

#nestedargs.aa:
#: nested arguments paste dot syntax
#=nestedargsinner


#: nested arguments sort
#$nestedargsinner

#nestedargsinner:  one
#nestedargsinner:11
#:  nest 1
#nestedargsinner:22
#:  nest 2

#strsubst:
#: {STRING}
#: {STRING example}
#: {STRING  example}
#: {STR}
#: {STR{ING}}
#: {UPPER arg}
#: {UPPER {STR}}
#: {{UPR} {STR}}
#: {undefined}
#: {undefined arg}
#: { STRING}
#: { STRING }
#: {STRING }.
#: \{STRING\}
#: \{STRING example\}
#: \{STR\}
#: \{STR{ING}\}
#: {ARGTEST argument}
#: {BRACED braced argument}

# expected results
#> Pipadoc Testsuite
#>
#> oneline test
#>
#> oneline w/ arg a
#> oneline w/ arg b
#>
#> oneline w/ arg 1
#> oneline w/ arg 2
#> oneline w/ arg 3 dot syntax
#> oneline w/ arg 4 dot syntax warning
#>
#> oneline w/ arg 1
#> oneline w/ arg 2
#> oneline w/ arg 3 dot syntax
#> oneline w/ arg 4 dot syntax warning
#> oneline w/ arg a
#> oneline w/ arg b
#>
#> oneline_concat end
#>
#> block test
#>
#> block w/ arg a
#> block w/ arg b
#>
#> block w/ arg 1
#> block w/ arg 2
#> block w/ arg 3 dot syntax
#>
#> block w/ arg 1
#> block w/ arg 2
#> block w/ arg 3 dot syntax
#> block w/ arg a
#> block w/ arg b
#>
#> block_concat end
#>
#> 1. arg oneline
#> 2. arg oneline dot syntax
#> 3. arg block
#> 4. arg block dot syntax
#>
#> nested paste
#>  nestedpaste inner
#>  nestedpaste inner2
#>
#> nested arguments paste old syntax
#>  one
#> nested arguments paste dot syntax
#>  one
#> nested arguments sort
#>  nest 1
#>  nest 2

#>
#> TESTBAR
#> TESTBAR becomes a docline
#>
#> example string
#> example stringexample
#> example string example
#> example string
#> example string
#> ARG
#> EXAMPLE STRING
#> EXAMPLE STRING
#> {undefined}
#> {undefined arg}
#> { STRING}
#> { STRING }
#> example string.
#> {STRING}
#> {STRING example}
#> {STR}
#> {STRING}
#> before argument after
#> {braced argument}
#>
#> Empty and non-existing parameters
#>
#>
#>
#>
#> END


