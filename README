pipadoc - Documentation extractor
=================================
:author:   Christian Thaeter
:email:    ct@pipapo.org
:date:     17. August 2020


[preface]
Introduction
------------

Embedding documentation in program source files often results in the problem that the
structure of a program is not the optimal structure for the associated documentation.
Still there are many good reasons to maintain documentation together with the source right
within the code which defines the documented functionality. Pipadoc addresses this problem
by extracting special comments out of a source file and let one define rules how to compile
the documentation into proper order.  This is somewhat similar to ``literate Programming''
but it puts the emphasis back to the code.

Pipadoc is programming language and documentation system agnostic, all it requires is that
the programming language has some form of comments starting with a defined character sequence
and spanning to the end of the source line. Moreover documentation parts can be written in
plain text files aside from the sources.


History
-------

This 'pipadoc' implemented in Lua follows an earlier implementation with a slightly different
(incompatible) syntax and less features which was implemented in AWK. Updating to the new
syntax should be straightforward and is suggested for any projects using pipadoc.


Getting the Source
------------------

Pipadoc is managed the git revision control system. You can clone the repository with

 git clone --depth 1 git://git.pipapo.org/pipadoc

The 'master' branch will stay stable and development will be done on the 'devel' branch.


Installation
------------

Pipadoc is single Lua source file `pipadoc.lua` which is portable among most Lua versions
(PUC Lua 5.1, 5.2, 5.3, Luajit, Ravi). It ships with a `pipadoc.install` shell script which
figures a  suitable Lua version out and installs `pipadoc.lua` as `pipadoc` in a given
directory or the current directory by default.

There are different ways how this can be used in a project:

- One can rely on a pipadoc installed in $PATH and just call that from the build tool chain
- When a installed Lua version is known from the build tool chain one can include the
  `pipadoc.lua` into the project and call it with the known Lua interpreter.
- One can ship the `pipadoc.lua` and `pipadoc.install` and do a local install in the build
  directory and use this pipadoc thereafter


Usage
-----

.....
 pipadoc [options...] [inputs..]
   options are:
     -v, --verbose
                         increment verbosity level
 
     -q, --quiet
                         suppresses any messages
 
     -d, --debug
                         set verbosity to debug level
                         one additional -v enables tracing
 
     -n, --dry-run
                         don not generate output
 
     -h, --help
                         show this help
 
     -r, --register <name> <file> <comment>
                         register a filetype pattern
                         for files matching a file pattern
 
     -t, --toplevel <name>
                         sets 'name' as toplevel node [MAIN]
 
     -c, --config <name>
                         selects a config file [pipadoc_config.lua]
 
     --no-defaults
                         disables default filetypes and configfile loading
 
     -m, --markup <name>
                         selects the markup engine for the output [text]
 
     -o, --output <file>
                         writes output to 'file' [stdout]
 
     -a, --alias <pattern> <as>
                         aliases filenames to another filetype.
                         force example, treat .install files as shell files:
                          --alias '(.*)%.install' '%1.sh'
 
     -D, --define <name>[=<value>]
                         define a GLOBAL variable to value or 'true'
     -D, --define -<name>
                         undefine a GLOBAL variable
 
     -P, --define-post <name>[=<value>]
                         define a GLOBAL_POST variable to value or 'true'
     -P, --define-post -<name>
                         undefine a GLOBAL_POST variable
 
     --
                         stops parsing the options and treats each
                         following argument as input file
 
   inputs are file names or a '-' that indicates standard input
.....


Basic concepts
--------------

Pipadoc is controlled by special line comments. This is chosen because it is the most common
denominator between almost all programming languages.

To make a line comment recognized as pipadoc comment it needs to be followed immediately
by a operator sequence. Which in the simplest case is just a single punctuation character.
One can give a section name left of the operator and an argument/key right of the operator.

To add special functionality and extend the semantics one can define pre and post processors.

Preprocessors are defined per programming language and process all source lines.

Postprocessors are defined per output markup and process every line to be outputed.

Finally there is a string substitution/template engine which processes text in curly braces.

Syntax
~~~~~~

Any 'line-comment' of the programming language directly (without spaces) followed by a
optional alphanumeric section name, followed by an operator, followed by an optional
argument. Only lines qualify this syntax are processed as pipadoc documentation.

.The formal syntax looks like:
....
<pipadoc> ::= [source] <linecomment> <opspec> [ <space> [documentationtext]]

<source> ::= <any source code text>

<linecomment> ::= <the filetypes linecomment sequence>

<opspec> ::= [section['.'key]] <operator> [argument]

<section> ::= <alphanumeric text including underscore>

<operator> ::= ":" | "=" | "@" | "$" | "#" | <user defined operators>

<key> ::= <alphanumeric text including underscore>

<argument> ::= <alphanumeric text including underscore>

<documentationtext> ::= <rest of the line>
....

IMPORTANT: Pipadoc does not know anything except the line comment characters about the source
           programming languages syntax. This includes literal strings and any other
           syntactic form which may look like a line comment, but is not. Such lines need to
           be dropped by a preprocessor to make them unambiguous.

There config shipped with pipadoc gives an example to drop a line when it end with "NODOC".

----
const char* example = "//MAIN: this is a C string and not documentation"; //NODOC
----

Documentation can be either blocked or oneline.

Block::
  Start with a documentation comment including a section or argument specifier but are not
  followed by documentation text on the same line.
  The text block then follows in documentation comments where section and
  argument are empty. Blocks span until a new documentation block is started.
Oneline::
  Is defined by a documentation comment which sets section and/or argument followed by
  documentation text on the same line. They can be interleaved within blocks.
  This is used to define index and glossary items right within block documentation.


Order of operations
~~~~~~~~~~~~~~~~~~~

Pipadoc reads all files line by line. and processes them in the following order:

Preprocessing ::
  Preprocessors are Lua functions who may alter the entire content of a line before any
  further processing. They get a 'context' passed in with the 'SOURCE' member containing
  the line read from the input file.

Parsing ::
  The line is broken down into it's components and the operators processing function
  will be called which is responsible for storing. The colon (':') operator also does a first
  string substitution pass to expand variables. This strsubst is done in input order.
  Macros may leverage this for additional state and may generate extra content like indices
  and append that to the respective sections.

Output Ordering ::
  The output order is generated by assembling the '{toplevel}_{markup}' or if that does
  not exist the '{toplevel}' section.
  The paste and sorting operators on the toplevel and included sections define the
  order of the document.

Postprocessing ::
  For each output context the postprocessors run in output order.
  A final string substitution pass is applied in 'output' order then.

Writeout ::
  The finished document is written to the output.

Report empty sections, Orphans and Doubletes::
  Pipadoc keeps stats on how each section was used. Finally it gives a report (as warning)
  on sections which appear to be unused or used more than once. These warnings may be ok, but
  sometimes they give useful hints about typing errors.

It is important to know that reading happens only line by line, operations can not span
lines. The processing steps may be stateful and thus preserve information for further
processing.


Sections and Keys
-----------------

Text in pipadoc is appended to named 'sections'. Text can be associated with some
alphanumeric key under that section. This enables later sorting for indices and glossaries.

Sections can be one line or span a block of lines.

One-line sections are defined when a section and maybe a key is followed by documentation
text. Block sections start with the section definition but no documentation text on the same
line. A block stays active until the next block section definition. One-line doctext can be
interleaved into Blocks.

The default block section name is the files name up, but excluding to the first dot.

Sections are later brought into the desired order by pasting them into a 'toplevel' section.
This default name for the 'toplevel' section is 'MAIN_{markup}' or if that does not exist
just 'MAIN'.

.An example document (example.sh)
----
#!/bin/sh
#: here the default section is 'example', derived from 'example.sh'
#oneline:o this is appended to the section 'oneline' under key 'o'
#: back to the 'example' section
#newname:
#: this starts a new section block named 'newname'
#oneline:a this is appended to the section 'oneline' under key 'a'
#MAIN:
#: Assemble the document
#: first the 'newname'
#=newname
#: then 'example'
#=example
#: and finally 'oneline' alphabetically sorted by keys
#@oneline
----

processed by pipadoc
....
lua pipadoc.lua example.sh
....

Will result in
----
Assemble the document
first the 'newname'
this starts a new section block named 'newname'
then 'example'
here the default section is 'example', derived from 'example.sh'
back to the 'example' section
and finally 'oneline' alphabetically sorted by keys
this is appended to the section 'oneline' under key 'a'
this is appended to the section 'oneline' under key 'o'
----

The pipadoc documentation you are just reading here is made and embedded in 'pipadoc.lua'
itself using 'asciidoc' as markup. Refer to the source itself to see how it is done.


Filetypes
---------

Pipadoc needs to know about the syntax of line comments of the files it is reading.
For this patterns are registered to be matched against the file name together with a
list of line comment characters.

Definitions for a lot common programming languages are already included. For languages
that support block comments the opening (but not the closing) commenting characters are
registered as well. This allows one to define section blocks right away. But using the
comment closing sequence right on the line will clobber the output, don't do that!

.Example in C
----
/*blocksection:
//: this is a block-section
//: line comment sequences inside the block comment are still required
*/

/*works_too: but looks ugly
*/

/*fail: don't do this, pipadoc comments span to the end of the line */
----

A special case is that when a line comment is defined as an empty string ("") then every
line of a file is considered as documentation but no special operations apply. This is used
for plain text documentation files. Which also uses the "PIPADOC:" keyword to enable special
operations within text files.

New uncommon filetypes can be added from a config file with 'filetype_register()'  or with
the '--register' command-line option.


Programming languages supported by pipadoc
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Autoconf, Automake,
AWK,
C, C++, Headerfiles,
CMake,
Delphi, Pascal,
Java, C#,
Javascript,
Lua,
Makefiles,
Objective-C,
Perl,
PHP,
Prolog,
Python,
Ruby,
SCons,
Shell,
SQL,
Textfiles, Pipadoc (`.pdoc`),
Visual Basic,


Operators
---------

Operators define what is considered as pipadoc comment and how to assemble the resulting document.

`:` ::
  The documentation operator. Defines normal documentation text. Each pipadoc comment using
  the `:` operator is processed as documentation. Later when generating the toplevel
  Section is used to paste all other documentation in proper order together.

`=` ::
  Section paste operator. Takes a section name as argument and will paste that section in
  place.

`@` ::
  Alphabetic sorting operator. Takes a section name as argument and will paste section
  text alphabetically sorted by its keys.

`$` ::
  Generic Sorting operator. Takes a section name as argument and will paste section text
  sorted by its keys.

`#` ::
  Numerical sorting operator. Takes a section name as argument and will paste section text
  numerically sorted by its keys.



Configuration File
------------------

Pipadoc tries to load a configuration file on startup. By default it's named
+pipadoc_config.lua+ in the current directory. This name can be changed by the '--config'
option.

The configuration file is used to define pre- and post- processors, define states
for those, define custom operators and string substitution macros. It is loaded and
executed as it own chunk and may only access the global variables (GLOBAL, CONTEXT) and
API functions described below.

Preprocessors
~~~~~~~~~~~~~

One can register multiple preprocessors for filetypes. A preprocessor can modify any
line prior it is parsed and further processed. By default pipadoc has no preprocessors
defined. The user may define these in a config file.

Preprocessors are used to autogenerate documentation comments from code. Lifting
parts of the code to the documentation side.

Postprocessors
~~~~~~~~~~~~~~

Postprocessors run at output generation time. They are registered per markup types.
Processors are called in order of their definition.

They are used to augment the generated output with markup specific things.

String Substitutions
~~~~~~~~~~~~~~~~~~~~

Documentation text is be passed to the string substitution engine which recursively
substitutes expressions within curly braces. The substitutions are taken from the passed
context (and GLOBAL's). Strings are replaced, functions become evaluated, everything else is
translated with Luas 'tostring()' function.

The names for substitutions must start with an alphabetic character or underline and can
be followed by alphanumeric characters or underlines. It may be followed with a delimiting
character (space) and an optional argument string which gets passed to functions or
retained verbatim on everything else. Names starting and ending with 2 underscores are
reserved to the implementation.

Curly braces, can be escaped with backslashes or backtick characters. These
characters can be escaped by them self.

Example Configuration File
~~~~~~~~~~~~~~~~~~~~~~~~~~

Pipadocs main objective is to scrape documentation comments from a project and generate
output in desired order. Such an basic approach would be insufficient for many common cases.
Thus pipadoc has facilities to generate and modify documentation in an extensible way.

Pipadoc itself comes with a configuration file for generating it's own documentation and
assist the test suite. This is a good starting point for writing your own configuration.

This configfile supports 'text' and 'asciidoc' back ends.


Preprocessors
^^^^^^^^^^^^^


Postprocessors
^^^^^^^^^^^^^^


Substitutions Macros
^^^^^^^^^^^^^^^^^^^^



Dependencies
~~~~~~~~~~~~

'pipadoc' does not depend on any external Lua libraries. Nevertheless modules can be loaded
optionally to augment the behavior and provide extra features. Plugin-writers should
use the 'request()' function instead the Lua 'require()', falling back to simpler but usable
functionality when some library is not available or call 'die()' when a reasonable fallback
won't do it.

Pipadoc calls 'request "luarocks.loader"' to make rocks modules available when
installed.


Programming API for Extensions
------------------------------


[[GLOBAL]]
Documentation Variables
~~~~~~~~~~~~~~~~~~~~~~~

The 'GLOBAL' and 'GLOBAL_POST' Lua tables holds key/value pairs of variables
with global definitions. These are used by the core and processors/'strsubst()'.
Simple string assignments can be set from the command line. Configuration files may define
more complex Lua functions for string substitutions.


Predefined Variables
^^^^^^^^^^^^^^^^^^^^

The 'GLOBAL' table is initialized with:

anchor:index_YEAR[]anchor:index_MONTH[]anchor:index_DAY[]anchor:index_HOUR[]anchor:index_MINUTE[]`YEAR, MONTH, DAY, HOUR, MINUTE`::
  Current date information
anchor:index_DAYNAME[]anchor:index_MONTHNAME[]`DAYNAME, MONTHNAME`::
  The name of the day of week or month
anchor:index_DATE[]`DATE`::
  Current date in YEAR/MONTH/DAY format
anchor:index_LOCALDATE[]`LOCALDATE`::
  Current date in current locale format
anchor:index_MARKUP[]`MARKUP`::
  The markup syntax (--markup option). This information used by pipadoc
  for selecting the top level section and postprocessors. Other user
  defined extensions may use it as well.
anchor:index_NIL[]`NIL`::
  Expands to an empty string.
anchor:index_NL[]`NL`::
  The line-break character sequence, defaults to '\n' and
  can be changed with the '--define' command-line option.

The 'GLOBAL_POST' table is used for a final 'strsubst()' pass after postprocessing.
There are no values defined in 'GLOBAL_POST'.

[[CONTEXT]]
The Context
~~~~~~~~~~~

Processors, operators, string substitution calls and diagnostics get a context
passed along. This context represents the state for the actual processed line plus
everything that's defined in GLOBAL.

In a few cases a fake-context in angle brackets is passed around for diagnostic functions.

Context Members
^^^^^^^^^^^^^^^

The following members are used/defined in 'contexts'.

anchor:index_ARG[]`ARG`::
  Optional argument to the operator. This can be the sort key
  (alphabetic or numeric) or another section name for pasting.
anchor:index_COMMENT[]`COMMENT`::
  Character sequence which is used as line comment.
anchor:index_FILE[]`FILE`::
  The file or section name currently processed or some special annotation
  in angle brackets (eg '<startup>') on other processing phases
anchor:index_COMMENTS[]anchor:index_TABLE[]`COMMENTS_TABLE`::
  A Lua table with the all possible line comment character sequences
  for this filetype. Already available at preprocessing time.
anchor:index_KEY[]`KEY`::
  Sort key
anchor:index_LANGUAGE[]`LANGUAGE`::
  The language name of this file.
anchor:index_LINE[]`LINE`::
  Current line number of input or section, or indexing key
  Lines start at 1
anchor:index_OP[]`OP`::
  Single punctuation operator defining how to process this line.
anchor:index_PRE[]`PRE`::
  Contains the source code in font of the line comment.
anchor:index_SECTION[]`SECTION`::
  Section where the documentation should appear.
anchor:index_SOURCE[]`SOURCE`::
  The line read from the input file, used for preprocessing and will be erased
  afterward preprocessing is done.
anchor:index_TEXT[]`TEXT`::
 The actual Documentation Text.


Exported Functions
~~~~~~~~~~~~~~~~~~

pipadoc exports some functions for the use in pre/post processors from config files.


Library Loading
^^^^^^^^^^^^^^^

anchor:index_request[] +*request(name)*+::
 try to load optional modules
   wraps Lua 'require' in a pcall so that failure to load module 'name' results in 'nil'
   rather than a error.


Logging Progress and Errors
^^^^^^^^^^^^^^^^^^^^^^^^^^^

Functions for to log progress and report errors. All this functions take a variable argument
list. Any argument passed to them will be converted to a string and printed to stderr when
the verbosity level is high enough.

anchor:index_warn[] +*warn(context,...)*+::
 report a important but non fatal failure
anchor:index_dbg[] +*dbg(context,...)*+::
 show debugging information
anchor:index_trace[] +*trace(context,...)*+::
 show more detailed progress information
anchor:index_die[] +*die(context, ...)*+::
 report a fatal error and exit the program

Type Checks
^^^^^^^^^^^

Wrappers around 'assert' to check externally supplied data. On success 'var' will be returned
otherwise an assertion error is raised.

anchor:index_assert_type[] +*assert_type(var, expected)*+::
 checks that the 'var' is of type 'expected'
anchor:index_maybe_type[] +*maybe_type(var, expected)*+::
 checks that the 'var' is of type 'expected' or nil
anchor:index_assert_char[] +*assert_char(var)*+::
 checks that 'var' is a single character
anchor:index_assert_notnil[] +*assert_notnil(var)*+::
 checks that 'var' is not 'nil'

Type Conversions
^^^^^^^^^^^^^^^^

Functions which do specific conversions.

anchor:index_to_table[] +*to_table(v)*+::
 if 'v' is not a table then return +++{v}+++
anchor:index_maybe_text[] +*maybe_text(v)*+::
 convert 'v' to a string, returns 'nil' when that string would be empty

String Substitution
^^^^^^^^^^^^^^^^^^^

anchor:index_strsubst[] +*strsubst(context, str, escape)*+::
 substitute text
  context:::
    The current context which defines all variables and
    macros for the substitution.
  str:::
    The string to operate on
  escape:::
    Rule for special character escaping
    true:::: handle escaping in one pass
    'escape':::: 1st pass
    'unescape':::: 2nd pass
    nil:::: no special escaping

.Examples
----
context = {
  STRING = "example string",
  STR = "{STRING}",
  ING = "ING",
  UPPER = function(context, arg)
            return arg:upper()
          end
 }

-- simple substitution
assert(strsubst(context, "{STRING}") == "example string")

-- arguments on stringish substitutions are retained
assert(strsubst(context, "{STRING example}") == "example stringexample")

-- substitution is recursively applied
assert(strsubst(context, "{STR}") == "example string")

-- that can be used to create names dynamically
assert(strsubst(context, "{STR{ING}}") == "example string")

-- functions are called with the argument and their return is substituted
assert(strsubst(context, "{UPPER arg}") == "ARG")

-- now together
assert(strsubst(context, "{UPPER {STR}}") == "EXAMPLE STRING")

-- undefined names are kept verbatim
assert(strsubst(context, "{undefined}") == "{undefined}")
----


Filetypes
^^^^^^^^^

anchor:index_filetype_register[] +*filetype_register(name, filep, linecommentseqs)*+::
 Register a new filetype
    name:::
      mnemonic name of the language
    filep:::
      a Lua pattern or list of patterns matching filename
    linecommentseqs:::
      a string or list of strings matching comments of the registered filetype

For example, C and C++ Filetypes are registered like:

----
filetype_register("C", {"%.c$","%.cpp$","%.C$", "%.cxx$", "%.h$"}, {"//", "/*"})
----


Operators
^^^^^^^^^

Operators have 2 functions associated. The first one is the processing function which
defines how a documentation comment gets stored. The second one is the generator function
which will emits the documentation.

anchor:index_operator_register[] +*operator_register(char, procfunc, genfunc)*+::
 Register a new operator
  char:::
    single punctuation character except '.' defining this operator.
  procfunc +function (context)+:::
    a function which receives a CONTEXT table of the current line.
    The procfunc processes and store the context in appropriate
    fashion.
  genfunc +function (context)+:::
    a function generating the (sequential) output from given context.


Preprocessors
^^^^^^^^^^^^^

anchor:index_preprocessor_register[] +*preprocessor_register(langpat, preprocess)*+::
 register a preprocessor
  langpat:::
    Register preprocessor to all filetypes whose mnemonic matches 'langpat'.
  preprocess:::
    The preprocessor to register. Can be one of:
    `function (context) ... end` ::::
      Takes the context of the current source line and shall return:
      *  the preprocessed line
      *  false to drop the line
      *  true to keep the line unaltered
      Preprocessors may store state or have other side effect using API functions.
    +{pattern, repl [, n]}+ ::::
      Generates a function calling 'context.SOURCE:gsub(pattern, repl [, n])' for preprocessing.


Postprocessors
^^^^^^^^^^^^^^

anchor:index_postprocessor_register[] +*postprocessor_register(markuppat, postprocess)*+::
 register a postprocessor
  markuppat:::
    Register postprocessor to all markups whose name matches 'markuppat'.
  postprocess:::
    The postprocessor to register. Can be one of:
    `function (context) ... end` ::::
      Takes the context of the current source line and shall return:
      *  the postprocessed line (context.TEXT)
      *  false to drop the line
      *  true to keep the line unaltered
      Postprocessors may store state or have other side effect using API functions.
    +{pattern, repl [, n]}+ ::::
      Generates a function calling 'context.TEXT:gsub(pattern, repl [, n])' for postprocessing.


Sections
^^^^^^^^

anchor:index_section_append[] +*section_append(section, key, context)*+::
 Append data to the given section/key
  to be called from preprocessors or macros which generate new content.

  section:::
    name of the section to append to, must be a string
  key:::
    the sub-key for sorting within that section. 'nil' for appending text to normal sections
  context:::
    The source line broken down into its components and additional pipadoc metadata


Other functions
~~~~~~~~~~~~~~~

anchor:index_pattern_escape[] +*pattern_escape(s)*+::
 Escape all characters in string 's' so that it cane be used as verbatim pattern.
anchor:index_add_inputfile[] +*add_inputfile(filename)*+::
 Add a 'filename' to the list of files to process
anchor:index_register_alias[] +*register_alias(from, to)*+::
 Register a new alias
anchor:index_make_context[] +*make_context(parent, new)*+::
 Create a new context.
Used whenever preprocessors/macros need to generate new content.
  parent:::
    The parent context to extend from.
  new:::
    A table (or nil) containing the additional members for the
    new context.


[appendix]
Common Warnings
---------------

Pipadoc emits warnings on problems. Even with warnings processing will go on but the output
may need some attention.
Warnings are suppressed with the '--quiet' option.

can't load module: ::
 'request()' failed to load a module.
strsubst function failed: ::
 strsubst tried to call a custom function which failed.
strsubst recursive expansion: ::
 cyclic substitution.
strsubst no expansion: ::
 no substitution defined.
unsupported preprocessor type ::
 Tried to 'preprocessor_register()' something that is not a function or table.
preprocessor failed: ::
 preprocessor function error.
preprocessor returned wrong type: ::
 preprocessor returned unsupported type (or nil).
unsupported postprocessor type ::
 Tried to 'postprocessor_register()' something that is not a function or table.
postprocessor failed: ::
 postprocessor function error.
postprocessor returned wrong type: ::
 postprocessor returned unsupported type (or nil).
ARG and KEY defined in operator ':', using KEY only ::
 Operator ':' must either be 'section:key' or 'section.key:' but not 'section.key:key'.
paste argument missing ::
 Using the '=' operator without an argument.
no such section ::
 The given section is not defined.
sort argument missing ::
 Using the '@', '$' or '#' operator without an argument.
no such section with keys ::
 The given section has no key entries.
can't load config file: ::
 The config file ('--config' option) could not be loaded.
operator processing failed: ::
 error executing a operators processor.
file not found: ::
 A given File can not be opened (wrong path or typo?).
unknown file type: ::
 The type of the given file was not recognized (see <<_usage,'--register'>> option).
recursive paste: ::
 Pasted sections (see <<_built_in_operators,paste operator>>) can not recursively
 include themself.
generator failed: ::
 error in operators generator function.
section is empty: ::
 Using '=', '@' or '#' on a section which has no data (under respective keys).
section unused: ::
 The printed section was not used. This might be intentional when generating
 only partial outputs.
section multiple times used: ::
 Section was pasted multiple times in the output.
section key unused: ::
 Section with keys (numeric or alphabetic) was not used.
section key multiple times used: ::
 Section was used multiple times in the output ('@', '$' or '#' operator).
Toplevel section undefined: ::
 The section used as root for the output generation is not defined.

[appendix]
Generate the Pipadoc Documentation
----------------------------------

'pipadoc' documents itself with embedded asciidoc text. This can be extracted with

----
lua pipadoc.lua -m asciidoc pipadoc.lua >pipadoc.txt
----

The resulting `pipadoc.txt` can then be processed with the asciidoc tool chain to produce
distribution formats:

----
# generate HTML
asciidoc -a toc pipadoc.txt

# generate PDF
a2x -L -k -v --dblatex-opts "-P latex.output.revhistory=0" pipadoc.txt
----

There is a '--make-doc' option which calls the above commands. For convenience


[appendix]
GNU General Public License
--------------------------

----
pipadoc - Documentation extractor
Copyright (C)                        Pipapo Project
 2015, 2016, 2017, 2020              Christian Thaeter <ct@pipapo.org>

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
----

License Explanation
~~~~~~~~~~~~~~~~~~~

The License (GPL) only applies to pipadoc and any derivative work. The purpose of pipadoc
is to extract documentation from other files, this does not imply that these source files
from which the documentation is extracted need to be licensed under the GPL, neither does
this imply that the extracted documentation need to be licensed under the GPL.
Using pipadoc for non-free software poses no problems about the Licensing terms of
this software.

The GPL applies when you distribute pipadoc itself, in original or modified form. Since
pipadoc is written in the Lua scripting language, you already distribute its source as well,
which naturally makes this distribution conform with the GPL.

Nevertheless, when you make any improvements to pipadoc please consider to contact
Christian Thäter <ct@pipapo.org> for including them into the mainline.

[index]
Index
-----


[big]#A# :: 
   <<index_add_inputfile,add_inputfile>> +

  <<index_ARG,ARG>> +

  <<index_assert_char,assert_char>> +

  <<index_assert_notnil,assert_notnil>> +

  <<index_assert_type,assert_type>> +


[big]#C# :: 
   <<index_COMMENT,COMMENT>> +

  <<index_COMMENTS,COMMENTS>> +


[big]#D# :: 
   <<index_DATE,DATE>> +

  <<index_DAY,DAY>> +

  <<index_DAYNAME,DAYNAME>> +

  <<index_dbg,dbg>> +

  <<index_die,die>> +


[big]#F# :: 
   <<index_FILE,FILE>> +

  <<index_filetype_register,filetype_register>> +


[big]#H# :: 
   <<index_HOUR,HOUR>> +


[big]#K# :: 
   <<index_KEY,KEY>> +


[big]#L# :: 
   <<index_LANGUAGE,LANGUAGE>> +

  <<index_LINE,LINE>> +

  <<index_LOCALDATE,LOCALDATE>> +


[big]#M# :: 
   <<index_make_context,make_context>> +

  <<index_MARKUP,MARKUP>> +

  <<index_maybe_text,maybe_text>> +

  <<index_maybe_type,maybe_type>> +

  <<index_MINUTE,MINUTE>> +

  <<index_MONTH,MONTH>> +

  <<index_MONTHNAME,MONTHNAME>> +


[big]#N# :: 
   <<index_NIL,NIL>> +

  <<index_NL,NL>> +


[big]#O# :: 
   <<index_OP,OP>> +

  <<index_operator_register,operator_register>> +


[big]#P# :: 
   <<index_pattern_escape,pattern_escape>> +

  <<index_postprocessor_register,postprocessor_register>> +

  <<index_PRE,PRE>> +

  <<index_preprocessor_register,preprocessor_register>> +


[big]#R# :: 
   <<index_register_alias,register_alias>> +

  <<index_request,request>> +


[big]#S# :: 
   <<index_SECTION,SECTION>> +

  <<index_section_append,section_append>> +

  <<index_SOURCE,SOURCE>> +

  <<index_strsubst,strsubst>> +


[big]#T# :: 
   <<index_TABLE,TABLE>> +

  <<index_TEXT,TEXT>> +

  <<index_to_table,to_table>> +

  <<index_trace,trace>> +


[big]#W# :: 
   <<index_warn,warn>> +


[big]#Y# :: 
   <<index_YEAR,YEAR>> +



