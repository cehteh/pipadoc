#!/bin/sh
# Lua script Installer
# Copyright (C) 2015, 2017            Christian Th√§ter <ct@pipapo.org>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

#: USAGE
#: -----
#:
#: sh pipadoc.install [<options>] [dir]
#:
#: installs 'pipadoc.install.lua' as 'pipadoc.install' in 'dir' (defaults to the current directory)
#: Options:
#:  -i "interpreters"    - override the list of lua interpreters to be tried,
#:                         default/compatible interpreters are configured below.
#:  -c                   - compiles the source to bytecode prior installing
#:  -s                   - strips debugging information from the compiled bytecode
#:  -x "suffix"          - add suffix to the installed name
#:  -n                   - install nothing, just show what would be done
#:  -l                   - lists available lua systems
#:  -v                   - verbose
#:  -h                   - help
#:
#: Note that compiling only saves a few milliseconds runtime cost and, with -s,
#: a little space. There is not much benefit yet.
#:
#: CONFIGURATION
#: -------------
#:
#: Configuration through shell variables is done within the install script itself:
#:
#: 'lua_interpreters' defines a list of lua implemntation which are are searched
#: in order, the first found is used.
lua_interpreters="luajit ravi lua5.3 lua-5.3 lua5.2 lua-5.2 lua lua-5.1 lua5.1"
#:

#: 'dependencies' list all libraries which are required for the installed program
dependencies=""
#:
#PLANNED: use luarocks for installing dependencies
#PLANNED: uninstall option, figure out what would be installed with given options and delete it when exist

#: The name of the programm to be installed is guessed from this install script name
name="${0%.install}"; name="${name##*/}"
#:

## END OF CONFIGURATION ##


# directory where to install
export installdir="${installdir:-.}"

compile=""
strip=""
suffix=""
list=""
tryonly=""
verbose=""

#############################################################


msg()
{
    echo "$*" 1>&2
}

dbg()
{
    test -z "$verbose" || echo "$*" 1>&2
}


die()
{
    echo "$*" 1>&2
    exit 1
}



check_lua ()
{
    dbg "trying: $1"

    lua_interpreter="$(which "$1")"

    if test "$lua_interpreter" -a -x "$lua_interpreter"; then
            dbg "found: $lua_interpreter"
            for i in $dependencies; do
                dbg "  check dependency: $i"
                $lua_interpreter -e "pcall(require,'luarocks.loader'); require '$i'" 2>/dev/null ||
                        {
                            dbg "    MISSING"
                            return 1
                        }
                dbg "    OK"
            done

            if test "$list" -o "$compile" ; then
                    compiler="$(which $(echo "$1" | sed -e 's/\(lua\)*/\1c/'))"
                    if test "$compiler" -a -x "$compiler"; then
                            dbg "  compiler available"
                            lua_emit()
                            {
                                dbg "emit: compile $compiler"

                                echo "#!$lua_interpreter" >"$installdir/$name$suffix"
                                $compiler ${strip:+-s} -o - "$name.lua" >>"$installdir/$name$suffix"
                                chmod +x "$installdir/$name$suffix"
                            }
                            return 0
                    elif test -z "$list"; then
                        msg "don't know how to compile for $lua_interpreter"
                        return 1
                    fi
            else
                lua_emit()
                {
                    dbg "emit: interpreter $lua_interpreter"
                    echo "#!$lua_interpreter" >"$installdir/$name$suffix"
                    tail -n +2 "$name.lua" >>"$installdir/$name$suffix"
                    chmod +x "$installdir/$name$suffix"
                }
                return 0
            fi
    fi
    return 1
}


find_lua ()
{
    for i in $@; do
        check_lua "$i" && test -z "$list" && return
    done
    test -z "$list" && die "not suitable lua found"
}


while test "$#" -ge 1; do
    case "$1" in
    -i)
        lua_interpreters="$2"
        test "$lua_interpreters" || die "-i <missing argument>"
        shift 2
    ;;
    -c)
        compile="true"
        shift
    ;;
    -s)
        strip="true"
        shift
    ;;
    -x)
        suffix="$2"
        test "$suffix" || die "-x <missing argument>"
        shift 2
    ;;
    -n)
        tryonly="true"
        shift
    ;;
    -l)
        list="true"
        verbose="true"
        shift
    ;;
    -v)
        verbose="true"
        shift
    ;;
    -h)
        sed -e 's/^#: \?\(.*\)/\1/p;d' "$0"
        exit 0
        shift
    ;;
    *)
        installdir="$1"
        shift
    ;;
    esac
done

test -f "$name.lua" || die "$name.lua not found"

find_lua "$lua_interpreters"
test "$list" && exit 0

if test "$tryonly" ; then
        test -d "$installdir" || msg "$installdir does not exist"
        test -w "$installdir" || msg "$installdir is not writeable"
        echo "would install '$installdir/$name$suffix'"
else
    echo "installing script '$installdir/$name$suffix'"
    mkdir -p "$installdir" || die "could not create $installdir"
    lua_emit
fi




